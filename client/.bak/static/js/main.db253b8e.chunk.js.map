{"version":3,"sources":["components/PlayerCard.js","hooks/useDarkMode.js","hooks/useLocalStorage.js","components/Display.js","App.js","serviceWorker.js","index.js"],"names":["PlayerCard","props","name","country","searches","useDarkMode","key","initialValue","useState","i","window","localStorage","getItem","JSON","parse","storedValue","setStoredValue","value","setItem","stringify","useLocalStorage","darkMode","setDarkMode","useEffect","document","body","classList","add","remove","Display","className","onClick","e","preventDefault","playerData","map","player","id","App","state","users","axios","get","then","res","setState","data","console","log","catch","err","this","React","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mSACaA,EAAa,SAAAC,GACtB,OACI,6BACI,qCAAWA,EAAMC,MACjB,uCAAaD,EAAME,SACnB,8CAAoBF,EAAMG,YCHzBC,EAAc,WAAO,IAAD,ECDF,SAACC,EAAKC,GAAkB,IAAD,EACZC,oBAAS,WAC3C,IAAMC,EAAIC,OAAOC,aAAaC,QAAQN,GACtC,OAAOG,EAAII,KAAKC,MAAML,GAAKF,KAHmB,mBAC3CQ,EAD2C,KAC9BC,EAD8B,KASlD,MAAM,CAACD,EAJU,SAAAE,GACbD,EAAeC,GACfP,OAAOC,aAAaO,QAAQZ,EAAKO,KAAKM,UAAUF,MDLpBG,CAAgB,YAAY,GAD/B,mBACtBC,EADsB,KACZC,EADY,KAK7B,OAHAC,qBAAU,WACNF,EAAWG,SAASC,KAAKC,UAAUC,IAAI,aAAeH,SAASC,KAAKC,UAAUE,OAAO,eACvF,CAACP,IACI,CAACA,EAAUC,IEJTO,EAAU,SAAA5B,GAAU,IAAD,EACII,IADJ,mBACrBgB,EADqB,KACXC,EADW,KAM5B,OACI,6BACI,4BAAQQ,UAAU,iBAAiBC,QANpB,SAAAC,GACnBA,EAAEC,iBACFX,GAAaD,KAIT,YACCpB,EAAMiC,WAAWC,KAAI,SAACC,GACnB,OAAO,kBAAC,EAAD,CACP9B,IAAK8B,EAAOC,GACZnC,KAAMkC,EAAOlC,KACbC,QAASiC,EAAOjC,QAChBC,SAAUgC,EAAOhC,gBCgBlBkC,G,kBA5Bb,WAAYrC,GAAQ,IAAD,8BACjB,+CACKsC,MAAQ,CACXC,MAAO,IAHQ,E,iFAME,IAAD,OAClBC,IAAMC,IAAN,qCACCC,MAAK,SAACC,GACL,EAAKC,SAAS,CACZL,MAAMI,EAAIE,OAEZC,QAAQC,IAAI,aAAcJ,EAAIE,SAE/BG,OAAM,SAACC,GACNH,QAAQC,IAAIE,Q,+BAId,OACE,yBAAKpB,UAAU,OACf,yDACA,kBAAC,EAAD,CAASI,WAAYiB,KAAKZ,MAAMC,a,GAvBpBY,IAAMC,YCOJC,QACW,cAA7B5C,OAAO6C,SAASC,UAEe,UAA7B9C,OAAO6C,SAASC,UAEhB9C,OAAO6C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASnC,SAASoC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.db253b8e.chunk.js","sourcesContent":["import React from 'react';\r\nexport const PlayerCard = props => {\r\n    return (\r\n        <div>\r\n            <h2>Name: {props.name}</h2>\r\n            <p>Country: {props.country}</p>\r\n            <p>Google searches:{props.searches}</p>\r\n        </div>\r\n    )\r\n}","import { useEffect } from 'react';\r\nimport { useLocalStorage } from './useLocalStorage';\r\n\r\nexport const useDarkMode = () => {\r\n    const [darkMode, setDarkMode] = useLocalStorage(\"darkMode\", true);\r\n    useEffect(() => {\r\n        darkMode ? document.body.classList.add(\"dark-mode\") : document.body.classList.remove('dark-mode')\r\n    },[darkMode])\r\n    return [darkMode, setDarkMode]\r\n}","import { useState } from 'react';\r\n\r\nexport const useLocalStorage = (key, initialValue) => {\r\n    const [storedValue, setStoredValue] = useState(() => {\r\n        const i = window.localStorage.getItem(key);\r\n        return i ? JSON.parse(i) : initialValue;\r\n    })\r\n    const setValue = value => {\r\n        setStoredValue(value);\r\n        window.localStorage.setItem(key, JSON.stringify(value));\r\n    };\r\n    return[storedValue, setValue];\r\n}","import React from 'react';\r\nimport { PlayerCard }from './PlayerCard';\r\nimport { useDarkMode } from '../hooks/useDarkMode';\r\n\r\nexport const Display = props => {\r\n    const [darkMode, setDarkMode] = useDarkMode();\r\n    const toggleDarkMode = e => {\r\n        e.preventDefault();\r\n        setDarkMode(!darkMode)\r\n    }\r\n    return (\r\n        <div>\r\n            <button className='darkModeToggle' onClick={toggleDarkMode}> Go Dark</button>\r\n            {props.playerData.map((player) => {\r\n                return <PlayerCard\r\n                key={player.id}\r\n                name={player.name}\r\n                country={player.country}\r\n                searches={player.searches}\r\n                />\r\n            })}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport axios from 'axios';\r\nimport{ Display} from './components/Display'\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      users: []\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    axios.get(`http://localhost:5000/api/players`)\r\n    .then((res) => {\r\n      this.setState({\r\n        users:res.data\r\n      })\r\n      console.log(\"users data\", res.data)\r\n    })\r\n    .catch((err) => {\r\n      console.log(err)\r\n    })\r\n  }\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n      <h1>Women's World Cup players</h1>\r\n      <Display playerData={this.state.users} />\r\n      </div>\r\n    );    \r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}